{"/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/test.js":"/* istanbul instrument in package npmtest_jquery_maskedinput */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/lib.npmtest_jquery.maskedinput.js":"/* istanbul instrument in package npmtest_jquery_maskedinput */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jquery_maskedinput = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jquery_maskedinput = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jquery.maskedinput && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jquery_maskedinput */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jquery_maskedinput\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jquery_maskedinput.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jquery_maskedinput.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jquery_maskedinput.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jquery_maskedinput.__dirname + '/lib.npmtest_jquery_maskedinput.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/gruntfile.js":"\n\"use strict\";\n\nmodule.exports = function( grunt ) {\n  grunt.initConfig({\n    // TODO: change to read component.json\n    pkg: require('./package.json'),\n\n    uglify: {\n      options: {\n        banner: '/*\\n    <%= pkg.description %>\\n    Copyright (c) 2007 - <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n    Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)\\n    Version: <%= pkg.version %>\\n*/\\n'\n      },\n\n      dev: {\n        options: {\n          beautify: true,\n          mangle: false\n        },\n\n        files: {\n          'dist/jquery.maskedinput.js': ['src/jquery.maskedinput.js']\n        }\n      },\n\n      min: {\n        files: {\n          'dist/jquery.maskedinput.min.js': ['src/jquery.maskedinput.js']\n        }\n      }\n    },\n\n    jasmine: {\n      full: {\n        src: \"src/**/*.js\",\n        options: {\n          specs: \"spec/*[S|s]pec.js\",\n          vendor: [\n            \"spec/lib/matchers.js\",\n            \"spec/lib/jasmine-species/jasmine-grammar.js\",\n            \"spec/lib/setup.js\",\n            \"lib/jquery-1.9.0.min.js\",\n            \"spec/lib/jquery.keymasher.js\"\n          ]\n        }\n      }\n    },\n    nugetpack: {\n        dist: {\n            src: 'jquery.maskedinput.nuspec',\n            dest: 'dist/'\n        }\n    }\n  });\n\n  grunt.loadNpmTasks(\"grunt-contrib-jasmine\");\n  grunt.loadNpmTasks(\"grunt-contrib-uglify\");\n  grunt.loadNpmTasks('grunt-nuget');\n\n  grunt.registerTask('test', ['jasmine']);\n  grunt.registerTask('pack', ['default','nugetpack']);\n  grunt.registerTask('default', ['test', 'uglify']);\n};\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Backspace.Spec.js":"feature(\"Backspace Key\", function() {\n\tstory('User presses backspace with cursor to the right of a mask literal',function(){\n\t\tscenario('character at cursor matches definition to the left',function(){\n\t\t\tgiven(\"an input with a mask definition of '9-99'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"9-99\")\n\t\t\t\t.mashKeys(\"123\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned to the right of literal\", function(){\n\t\t\t\tinput.caret(2);\n\t\t\t});\n\n\t\t\twhen(\"hitting the backspace key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('2-3_');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t});\n\t\t});\n\n\t\tscenario('character at cursor does not match definition to the left',function(){\n\t\t\tgiven(\"an input with a mask definition of 'a-99'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"a-99\")\n\t\t\t\t.mashKeys(\"z12\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned to the right of literal\", function(){\n\t\t\t\tinput.caret(2);\n\t\t\t});\n\n\t\t\twhen(\"hitting the backspace key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('_-12');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t});\n\t\t});\n\t});\n\n\tstory('User presses backspace with cursor on last character',function(){\n\t\tscenario('cursor character matches definition to the left',function(){\n\t\t\tgiven(\"an input with a mask definition of '99'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"99\")\n\t\t\t\t.mashKeys(\"12\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned on first character\", function(){\n\t\t\t\tinput.caret(1);\n\t\t\t});\n\n\t\t\twhen(\"hitting the backspace key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('2_');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t});\n\t\t});\n\n\t\tscenario('cursor character does not match definition to the left',function(){\n\t\t\tgiven(\"an input with a mask definition of '9a'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"9a\")\n\t\t\t\t.mashKeys(\"1z\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned on first character\", function(){\n\t\t\t\tinput.caret(1);\n\t\t\t});\n\n\t\t\twhen(\"hitting the backspace key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('_z');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t});\n\t\t});\n\n\t\tdescribe('There is a mask literal between the two placeholders',function(){\n\t\t\tscenario('character at end matches definition of first position',function(){\n\t\t\t\tgiven(\"an input with a mask definition of '9-9'\", function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mask(\"9-9\")\n\t\t\t\t\t.mashKeys(\"12\");\n\t\t\t\t});\n\n\t\t\t\tgiven(\"the input has cursor positioned on literal\", function(){\n\t\t\t\t\tinput.caret(1);\n\t\t\t\t});\n\n\t\t\t\twhen(\"hitting the backspace key\",function(){\n\t\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t\t\t});\n\n\t\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\t\texpect(input).toHaveValue('2-_');\n\t\t\t\t});\n\n\t\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tscenario('character at end does not match definition of first position',function(){\n\t\t\t\tgiven(\"an input with a mask definition of '9-9'\", function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mask(\"9-a\")\n\t\t\t\t\t.mashKeys(\"1z\");\n\t\t\t\t});\n\n\t\t\t\tgiven(\"the input has cursor positioned on literal\", function(){\n\t\t\t\t\tinput.caret(1);\n\t\t\t\t});\n\n\t\t\t\twhen(\"hitting the backspace key\",function(){\n\t\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t\t\t});\n\n\t\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\t\texpect(input).toHaveValue('_-z');\n\t\t\t\t});\n\n\t\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Completed.Spec.js":"feature(\"Completed callback\", function() {\n\tscenario('Completing mask by typing last character',function(){\n\t\tvar completed=false;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput.mask(\"99\",{completed:function(){completed=true;}});\n\t\t});\n\n\t\twhen(\"typing left to right\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"completed callback should be called\",function(){\n\t\t\texpect(completed).toBeTruthy();\n\t\t});\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('12');\n\t\t});\n\t});\n\n\tscenario('Completing mask by typing first character',function(){\n\t\tvar completed=false;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput.val(\"12\").mask(\"99\",{completed:function(){completed=true;}});\n\t\t});\n\n\t\twhen(\"replacing first character value\",function(){\n\t\t\tinput\n\t\t\t.caret(1)\n\t\t\t.mashKeys(function(keys){keys.type(keys.backspace)})\n\t\t\t.mashKeys(\"3\");\n\t\t});\n\n\t\tthen(\"completed callback should be called\",function(){\n\t\t\texpect(completed).toBeTruthy();\n\t\t});\n\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('32');\n\t\t});\n\t});\n\n\tscenario('Typing last character of incomplete mask',function(){\n\t\tvar completed=false;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput\n\t\t\t.mask(\"99\",{completed:function(){completed=true;}})\n\t\t\t.mashKeys(\"1\")\n\t\t\t.mashKeys(function(keys){keys.type(keys.backspace)});\n\t\t});\n\n\t\twhen(\"moving cursor to last position and typing\",function(){\n\t\t\tinput.caret(1).mashKeys(\"5\");\n\t\t});\n\n\t\tthen(\"completed callback should not be called\",function(){\n\t\t\texpect(completed).toBeFalsy();\n\t\t});\n\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('_5');\n\t\t});\n\n\t});\n\n\tscenario('Typing last character of required portion of mask containing optional',function(){\n\t\tvar completed=false;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput.mask(\"99?99\",{completed:function(){completed=true;}});\n\t\t});\n\n\t\twhen(\"typing left to right\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"completed callback should be called\",function(){\n\t\t\texpect(completed).toBeTruthy();\n\t\t});\n\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('12__');\n\t\t});\n\t});\n\n\tscenario('Typing all characters of required portion of mask containing optional',function(){\n\t\tvar completedCount=0;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput.mask(\"99?99\",{completed:function(){completedCount++;}});\n\t\t});\n\n\t\twhen(\"typing left to right\",function(){\n\t\t\tinput.mashKeys(\"1234\");\n\t\t});\n\n\t\tthen(\"completed callback should be called\",function(){\n\t\t\texpect(completedCount).toEqual(1);\n\t\t});\n\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('1234');\n\t\t});\n\t});\n\n\tscenario('Completing mask by typing last character with literal to right',function(){\n\t\tvar completed=false;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput.mask(\"99!\",{completed:function(){completed=true;}});\n\t\t});\n\n\t\twhen(\"typing left to right\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"completed callback should be called\",function(){\n\t\t\texpect(completed).toBeTruthy();\n\t\t});\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('12!');\n\t\t});\n\t});\n\n\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Delete.spec.js":"feature(\"Delete Key\", function() {\n\tstory('User presses delete with cursor on a mask literal',function(){\n\t\tscenario('character at end matches definition to the right',function(){\n\t\t\tgiven(\"an input with a mask definition of '9-99'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"9-99\")\n\t\t\t\t.mashKeys(\"123\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned on literal\", function(){\n\t\t\t\tinput.caret(1);\n\t\t\t});\n\n\t\t\twhen(\"hitting the delete key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.delete)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('1-3_');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(2);\n\t\t\t});\n\t\t});\n\n\t\tscenario('character at end does not match definition to the right',function(){\n\t\t\tgiven(\"an input with a mask definition of '9-9a'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"9-9a\")\n\t\t\t\t.mashKeys(\"12z\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned on literal\", function(){\n\t\t\t\tinput.caret(1);\n\t\t\t});\n\n\t\t\twhen(\"hitting the delete key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.delete)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('1-_z');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(2);\n\t\t\t});\n\t\t});\n\t});\n\n\tstory('User presses delete with cursor on first character',function(){\n\t\tscenario('character to right matches definition of current position',function(){\n\t\t\tgiven(\"an input with a mask definition of '99'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"99\")\n\t\t\t\t.mashKeys(\"12\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned on first character\", function(){\n\t\t\t\tinput.caret(0);\n\t\t\t});\n\n\t\t\twhen(\"hitting the delete key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.delete)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('2_');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t});\n\t\t});\n\n\t\tscenario('character to right does not match definition of current position',function(){\n\t\t\tgiven(\"an input with a mask definition of '9a'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask(\"9a\")\n\t\t\t\t.mashKeys(\"1z\");\n\t\t\t});\n\n\t\t\tgiven(\"the input has cursor positioned on first character\", function(){\n\t\t\t\tinput.caret(0);\n\t\t\t});\n\n\t\t\twhen(\"hitting the delete key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.delete)});\n\t\t\t});\n\n\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\texpect(input).toHaveValue('_z');\n\t\t\t});\n\n\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t});\n\t\t});\n\t\t\n\t\tdescribe('There is a mask literal between the two placeholders',function(){\n\t\t\tscenario('character to right matches definition of current position',function(){\n\t\t\t\tgiven(\"an input with a mask definition of '9-9'\", function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mask(\"9-9\")\n\t\t\t\t\t.mashKeys(\"12\");\n\t\t\t\t});\n\n\t\t\t\tgiven(\"the input has cursor positioned on first character\", function(){\n\t\t\t\t\tinput.caret(0);\n\t\t\t\t});\n\n\t\t\t\twhen(\"hitting the delete key\",function(){\n\t\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.delete)});\n\t\t\t\t});\n\n\t\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\t\texpect(input).toHaveValue('2-_');\n\t\t\t\t});\n\n\t\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tscenario('character to right does not match definition of current position',function(){\n\t\t\t\tgiven(\"an input with a mask definition of '9-9'\", function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mask(\"9-a\")\n\t\t\t\t\t.mashKeys(\"1z\");\n\t\t\t\t});\n\n\t\t\t\tgiven(\"the input has cursor positioned on first character\", function(){\n\t\t\t\t\tinput.caret(0);\n\t\t\t\t});\n\n\t\t\t\twhen(\"hitting the delete key\",function(){\n\t\t\t\t\tinput.mashKeys(function(keys){keys.type(keys.delete)});\n\t\t\t\t});\n\n\t\t\t\tthen(\"value should be correct\",function(){\n\t\t\t\t\texpect(input).toHaveValue('_-z');\n\t\t\t\t});\n\n\t\t\t\tand(\"caret position should be correct\",function(){\n\t\t\t\t\texpect(input.caret().begin).toEqual(0);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Enter.Spec.js":"feature(\"Enter Key\", function() {\n    var enterKeyEvent = $.Event('keydown.mask');\n    enterKeyEvent.which = enterKeyEvent.keyCode = 13;\n\n    story('User presses enter key after typing in some changes',function(){\n        scenario(\"All placeholders filled\",function(){\n            given(\"a mask with two placeholders\",function(){\n                input.mask(\"99\");\n            });\n            when(\"typing two characters and pressing enter\",function(){\n                input.mashKeys(\"12\").trigger(enterKeyEvent);\n            });\n            then(\"value should be correct\",function(){\n                expect(input).toHaveValue(\"12\");\n            });\n        });\n\n        scenario(\"Empty placeholders remaining\",function(){\n            given(\"a mask with two placeholders\",function(){\n                input.mask(\"99\");\n            });\n            when(\"typing one character and pressing enter\",function(){\n                input.mashKeys(\"1\").trigger(enterKeyEvent);\n            });\n            then(\"value should be empty\",function(){\n                expect(input).toHaveValue(\"\");\n            });\n        });\n\n        scenario(\"Empty placeholders remaining with autoclear set to false\",function(){\n            given(\"a mask with two placeholders\",function(){\n                input.mask(\"99\", { autoclear: false });\n            });\n            when(\"typing one character and pressing enter\",function(){\n                input.caret(0);\n                input.mashKeys(\"1\")\n                input.trigger(enterKeyEvent);\n            });\n            then(\"value should remain visible with placeholders\",function(){\n                expect(input).toHaveValue(\"1_\");\n            });\n        });\n    });\n\n    story(\"User presses enter key after typing in some changes and masks contain Optional Markers\",function(){\n        scenario(\"Placeholders not filled to marker\",function(){\n            given(\"a mask with an optional marker\",function(){\n                input.mask(\"99?99\");\n            });\n            when(\"typing one character and leaving\",function(){\n                input.mashKeys(\"1\").trigger(enterKeyEvent);\n            });\n            then(\"value should be empty\",function(){\n                expect(input).toHaveValue(\"\");\n            });\n        });\n\n        scenario(\"Placeholders not filled to marker and autoclear = false\", function() {\n            given(\"a mask with an optional marker\",function(){\n                input.mask(\"99?99\", { autoclear: false });\n            });\n            when(\"typing one character and leaving\",function(){\n                input.mashKeys(\"1\").trigger(enterKeyEvent);\n            });\n            then(\"value should be empty\",function(){\n                expect(input).toHaveValue(\"1___\");\n            });\n        });\n\n        scenario(\"Placeholders filled to marker\",function(){\n            given(\"a mask with an optional marker\",function(){\n                input.mask(\"99?99\");\n            });\n            when(\"typing two characters and leaving\",function(){\n                input.mashKeys(\"12\").trigger(enterKeyEvent);\n            });\n            then(\"value should remain\",function(){\n                expect(input).toHaveValue(\"12\");\n            });\n        });\n\n        scenario(\"Placeholders filled to marker and autoclear = false\", function() {\n            given(\"a mask with an optional marker\",function(){\n                input.mask(\"99?99\", { autoclear: false });\n            });\n            when(\"typing two characters and leaving\",function(){\n                input.mashKeys(\"12\").trigger(enterKeyEvent);\n            });\n            then(\"value should remain\",function(){\n                expect(input).toHaveValue(\"12\");\n            });\n        });\n\n        scenario(\"Placeholders filled, one marker filled, and autoclear = false\", function() {\n            given(\"a mask with an optional marker\",function(){\n                input.mask(\"99?99\", { autoclear: false });\n            });\n            when(\"typing three characters and leaving\",function(){\n                input.mashKeys(\"123\").trigger(enterKeyEvent);\n            });\n            then(\"value should remain\",function(){\n                expect(input).toHaveValue(\"123\");\n            });\n        });\n\n        scenario(\"Placeholders and markers filled, and autoclear = false\", function() {\n            given(\"a mask with an optional marker\",function(){\n                input.mask(\"99?99\", { autoclear: false });\n            });\n            when(\"typing four characters and leaving\",function(){\n                input.mashKeys(\"1234\").trigger(enterKeyEvent);\n            });\n            then(\"value should remain\",function(){\n                expect(input).toHaveValue(\"1234\");\n            });\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Escape.Spec.js":"feature(\"Escape Key\", function() {\n\tstory('User presses escape key after typing in some changes',function(){\n\t\tscenario('mask is applied with an existing value',function(){\n\t\t\tgiven(\"an input an existing value '6'\", function(){\n\t\t\t\tinput\n\t\t\t\t.val('6');\n\t\t\t});\n\n\t\t\tgiven(\"a mask definition of '9'\", function(){\n\t\t\t\tinput\n\t\t\t\t.mask('9').focus();\n\t\t\t});\n\t\t\twaits(1);\n\t\t\twhen(\"user types something different then hits escape key\",function(){\n\t\t\t\tinput.mashKeys(function(keys){keys.type('1',keys.esc)});\n\t\t\t});\n\n\t\t\tthen(\"value is return to previous value\",function(){\n\t\t\t\texpect(input).toHaveValue('6');\n\t\t\t});\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Focus.Spec.js":"feature(\"Focusing A Masked Input\",function(){\n\tscenario(\"Mask starts with a placeholder\",function(){\n\t\tgiven(\"a mask beginning with a placeholder\",function(){\n\t\t\tinput.mask(\"9\");\n\t\t});\n\t\twhen(\"focusing\",function(){\n\t\t\tinput.focus();\n\t\t});\n\t\twaits(20);\n\t\tthen(\"placeholder text should be correct\",function(){\n\t\t\texpect(input).toHaveValue('_');\n\t\t});\n\t\tand(\"caret position should be correct\",function(){\n\t\t\tvar caret=input.caret();\n\t\t\texpect(caret.begin).toEqual(0);\n\t\t\texpect(caret.end).toEqual(0);\n\t\t});\n\t});\n\n\tscenario(\"Mask starts with a literal\",function(){\n\t\tgiven(\"a mask beginning with a literal\",function(){\n\t\t\tinput.mask(\"(9)\");\n\t\t});\n\t\twhen(\"focusing\",function(){\n\t\t\tinput.focus();\n\t\t});\n\t\twaits(20);\n\t\tthen(\"placeholder text should be correct\",function(){\n\t\t\texpect(input).toHaveValue('(_)');\n\t\t});\n\t\tand(\"caret position should be correct\",function(){\n\t\t\tvar caret=input.caret();\n\t\t\texpect(caret.begin).toEqual(1);\n\t\t\texpect(caret.end).toEqual(1);\n\t\t});\n\t});\n\n\tscenario(\"Mask starts with a literal that fits first placeholder\",function(){\n\t\tgiven(\"a mask beginning with a literal\",function(){\n\t\t\tinput.mask(\"19\").focus();\n\t\t});\n\t\twaits(20);\n\t\twhen(\"blurring\",function(){\n\t\t\tinput.blur();\n\t\t});\n\t\twaits(20);\n\t\tthen(\"input value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('');\n\t\t});\n\t});\n\n\tscenario(\"Mask starts with a literal that fits first placeholder and autoclear set to false\",function(){\n\t\tgiven(\"a mask beginning with a literal\",function(){\n\t\t\tinput.mask(\"?19\",{autoclear: false}).focus();\n\t\t});\n\t\twaits(20);\n\t\twhen(\"blurring\",function(){\n\t\t\tinput.blur();\n\t\t});\n\t\twaits(20);\n\t\tthen(\"input value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('');\n\t\t});\n\t});\n\n\tscenario(\"Masking a hidden input\",function(){\n\t\tvar error;\n\t\t$(window).on(\"error.test\",function(err){error=err;})\n\n\t\tgiven(\"a mask on a hidden input\",function(){\n\t\t\tinput.hide().mask(\"9\");\n\t\t});\n\t\twhen(\"focusing input\",function(){\n\t\t\tinput.focus();\n\t\t});\n\t\twaits(1);\n\t\tthen(\"should not throw an error\",function(){\n\t\t\texpect(error).toBeUndefined();\n\t\t})\n\t});\n\n\tscenario(\"Mask contains a partial value with autoclear set to false\",function(){\n\t\tgiven(\"the input has a partial value\",function(){\n\t\t\tinput.val(\"1\");\n\t\t});\n\t\tgiven(\"a mask with two placeholders and autoclear=false\",function(){\n\t\t\tinput.mask(\"99\", { autoclear: false });\n\t\t});\n\t\twhen(\"focusing on the input\",function(){\n\t\t\tinput.focus();\n\t\t});\n\t\tthen(\"the value should be partially filled out\",function(){\n\t\t\texpect(input).toHaveValue(\"1_\");\n\t\t});\n\t\tthen(\"the input partial value should remain\",function(){\n\t\t\texpect(input).toHaveValue(\"1_\");\n\t\t});\n\t});\n\n\tscenario(\"Mask containing optional mask ?\",function(){\n\t\tgiven(\"the input has a partial value\",function(){\n\t\t\tinput.val(\"99\");\n\t\t});\n\t\tgiven(\"a optional mask on input\",function(){\n\t\t\tinput.mask(\"9?9\");\n\t\t});\n\t\twhen(\"focusing input\",function(){\n\t\t\tinput.focus();\n\t\t});\n\t\twaits(1);\n\t\tthen(\"caret position should be correct\",function(){\n\t\t\tvar caret=input.caret();\n\t\t\texpect(caret.begin).toEqual(0);\n\t\t\texpect(caret.end).toEqual(2);\n\t\t});\n\t});\n});\n\nfeature(\"Leaving A Masked Input\",function(){\n\tscenario(\"All placeholders filled\",function(){\n\t\tgiven(\"a mask with two placeholders\",function(){\n\t\t\tinput.mask(\"99\");\n\t\t});\n\t\twhen(\"typing two characters and blurring\",function(){\n\t\t\tinput.mashKeys(\"12\").blur();\n\t\t});\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue(\"12\");\n\t\t});\n\t});\n\n\tscenario(\"Empty placeholders remaining\",function(){\n\t\tgiven(\"a mask with two placeholders\",function(){\n\t\t\tinput.mask(\"99\");\n\t\t});\n\t\twhen(\"typing one character and blurring\",function(){\n\t\t\tinput.mashKeys(\"1\").blur();\n\t\t});\n\t\tthen(\"value should be empty\",function(){\n\t\t\texpect(input).toHaveValue(\"\");\n\t\t});\n\t});\n\n\tscenario(\"Mask ending in literal\",function(){\n\t\tgiven(\"a mask ending in a literal\",function(){\n\t\t\tinput.mask(\"99!\");\n\t\t});\n\t\twhen(\"typing two characters and blurring\",function(){\n\t\t\tinput.mashKeys(\"12\").blur();\n\t\t});\n\t\tthen(\"value should remain\",function(){\n\t\t\texpect(input).toHaveValue(\"12!\");\n\t\t});\n\t});\n\n\tscenario(\"Empty placeholders remaining with autoclear set to false\",function(){\n\t\tgiven(\"a mask with two placeholders\",function(){\n\t\t\tinput.mask(\"99\", { autoclear: false });\n\t\t});\n\t\twhen(\"typing one character and blurring\",function(){\n\t\t\tinput.caret(0);\n\t\t\tinput.mashKeys(\"1\")\n\t\t\tinput.blur();\n\t\t});\n\t\tthen(\"value should remain visible with placeholders\",function(){\n\t\t\texpect(input).toHaveValue(\"1_\");\n\t\t});\n\t});\n\n\tscenario(\"Shifts characters left on blur with autoclear false\",function(){\n\t\tgiven(\"a mask with 10 placeholders\",function(){\n\t\t\tinput.mask(\"(999) 999-9999\", { autoclear: false });\n\t\t});\n\t\twhen(\"focusing input\",function(){\n\t\t\tinput.focus();\n\t\t});\n\t\twaits(20);\n\t\twhen(\"typing characters at the end of the mask and blurring\",function(){\n\t\t\tinput.caret(12);\n\t\t\tinput.mashKeys(\"44\").blur();\n\t\t});\n\t\tthen(\"characters should shift left to beginning of mask\",function(){\n\t\t\texpect(input).toHaveValue(\"(44_) ___-____\");\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Init.Spec.js":"feature(\"Initializing a Mask\",function(){\n\tscenario(\"An input with no value\",function(){\n\t\tgiven(\"an input with no value\",function(){\n\t\t\tinput.val(\"\");\n\t\t});\n\t\twhen(\"setting a mask with two placeholders\",function(){\n\t\t\tinput.mask(\"99\");\n\t\t});\n\t\tthen(\"the value should be an empty string\",function(){\n\t\t\texpect(input).toHaveValue(\"\");\n\t\t});\n\t});\n\n\tscenario(\"An input with a valid value and no placeholders remaining\",function(){\n\t\tgiven(\"an input with a valid value\",function(){\n\t\t\tinput.val(\"5555555555\");\n\t\t});\n\t\twhen(\"setting a mask\",function(){\n\t\t\tinput.mask(\"(999) 999-9999\");\n\t\t});\n\t\tthen(\"the value should be intact\",function(){\n\t\t\texpect(input).toHaveValue(\"(555) 555-5555\");\n\t\t});\n\t});\n\n\tscenario(\"An input with a valid value ending in a literal\",function(){\n\t\tgiven(\"an input with a valid value\",function(){\n\t\t\tinput.val(\"12\");\n\t\t});\n\t\twhen(\"setting a mask\",function(){\n\t\t\tinput.mask(\"(99)\");\n\t\t});\n\t\tthen(\"the value should be intact\",function(){\n\t\t\texpect(input).toHaveValue(\"(12)\");\n\t\t});\n\t});\n\n\tscenario(\"An input with an invalid value and placeholders remaining\",function(){\n\t\tgiven(\"an invalid input value\",function(){\n\t\t\tinput.val(\"55555555\");\n\t\t});\n\t\twhen(\"setting a mask\",function(){\n\t\t\tinput.mask(\"(999) 999-9999\");\n\t\t});\n\t\tthen(\"the value should be empty\",function(){\n\t\t\texpect(input).toHaveValue(\"\");\n\t\t});\n\t});\n\n\tscenario(\"An input with an invalid value, placeholders remaining and autoclear set to false\",function(){\n\t\tgiven(\"an invalid input value\",function(){\n\t\t\tinput.val(\"55555555\");\n\t\t});\n\t\twhen(\"setting a mask with autoclear set to false\",function(){\n\t\t\tinput.mask(\"(999) 999-9999\", { autoclear: false });\n\t\t});\n\t\tthen(\"the value be intact with placeholders visible\",function(){\n\t\t\texpect(input).toHaveValue(\"(555) 555-55__\");\n\t\t});\n\t});\n\n\tscenario(\"An input no value and autoclear set to false\", function() {\n\t\tgiven(\"an input with no value\",function(){\n\t\t\tinput.val(\"\");\n\t\t});\n\t\twhen(\"setting a mask with autoclear set to false\",function(){\n\t\t\tinput.mask(\"(999) 999-9999\", { autoclear: false });\n\t\t});\n\t\tthen(\"the value should be empty\",function(){\n\t\t\texpect(input).toHaveValue(\"\");\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Optional.Spec.js":"feature(\"Optional marker\",function(){\n    scenario(\"Placeholders not filled to marker\",function(){\n        given(\"a mask with an optional marker\",function(){\n            input.mask(\"99?99\");\n        });\n        when(\"typing one character and leaving\",function(){\n            input.mashKeys(\"1\").blur();\n        });\n        then(\"value should be empty\",function(){\n            expect(input).toHaveValue(\"\");\n        });\n    });\n\n    scenario(\"Placeholders not filled to marker and autoclear = false\", function() {\n        given(\"a mask with an optional marker\",function(){\n            input.mask(\"99?99\", { autoclear: false });\n        });\n        when(\"typing one character and leaving\",function(){\n            input.mashKeys(\"1\").blur();\n        });\n        then(\"value should be empty\",function(){\n            expect(input).toHaveValue(\"1___\");\n        });\n    });\n\n    scenario(\"Placeholders filled to marker\",function(){\n        given(\"a mask with an optional marker\",function(){\n            input.mask(\"99?99\");\n        });\n        when(\"typing two characters and leaving\",function(){\n            input.mashKeys(\"12\").blur();\n        });\n        then(\"value should remain\",function(){\n            expect(input).toHaveValue(\"12\");\n        });\n    });\n\n    scenario(\"Placeholders filled to marker with literals after\",function(){\n        given(\"a mask with an optional marker and literals\",function(){\n            input.mask(\"99!? x 99\");\n        });\n        when(\"typing two characters and leaving\",function(){\n            input.mashKeys(\"12\").blur();\n        });\n        then(\"value should remain\",function(){\n            expect(input).toHaveValue(\"12!\");\n        });\n    });\n\n    scenario(\"Placeholders filled to marker and autoclear = false\", function() {\n        given(\"a mask with an optional marker\",function(){\n            input.mask(\"99?99\", { autoclear: false });\n        });\n        when(\"typing two characters and leaving\",function(){\n            input.mashKeys(\"12\").blur();\n        });\n        then(\"value should remain\",function(){\n            expect(input).toHaveValue(\"12\");\n        });\n    });\n\n    scenario(\"Placeholders filled, one marker filled, and autoclear = false\", function() {\n        given(\"a mask with an optional marker\",function(){\n            input.mask(\"99?99\", { autoclear: false });\n        });\n        when(\"typing three characters and leaving\",function(){\n            input.mashKeys(\"123\").blur();\n        });\n        then(\"value should remain\",function(){\n            expect(input).toHaveValue(\"123\");\n        });\n    });\n\n    scenario(\"Placeholders and markers filled, and autoclear = false\", function() {\n        given(\"a mask with an optional marker\",function(){\n            input.mask(\"99?99\", { autoclear: false });\n        });\n        when(\"typing four characters and leaving\",function(){\n            input.mashKeys(\"1234\").blur();\n        });\n        then(\"value should remain\",function(){\n            expect(input).toHaveValue(\"1234\");\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Paste.Spec.js":"feature(\"Pasting\", function() {\t\n\tscenario('When pasting a value',function(){\n\t\tvar completed=false;\n\t\tgiven(\"an input with a completed callback\", function(){\n\t\t\tinput.mask(\"99\",{completed:function(){completed=true;}});\n\t\t});\n\n\t\twhen(\"pasting\",function(){\n\t\t\tinput.val(\"99\").trigger(\"paste\").trigger(\"input\");\n\t\t});\n\t\twaits(1);\n\t\tthen(\"completed callback should be called\",function(){\n\t\t\texpect(completed).toBeTruthy();\n\t\t});\n\t});\n});","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Placeholder.spec.js":"feature(\"Multiple character placeholders\",function(){\n    scenario(\"Focusing\",function(){\n        given(\"a mask beginning with multi character placeholder\",function(){\n            input.mask(\"99/9999\",{placeholder:\"mm/yyyy\"});\n        });\n        when(\"focusing\",function(){\n            input.focus();\n        });\n        waits(20);\n        then(\"placeholder text should be correct\",function(){\n            expect(input).toHaveValue('mm/yyyy');\n        });\n    });\n\n    scenario(\"Typing\",function(){\n        given(\"a mask beginning with multi character placeholder\",function(){\n            input.mask(\"99/9999\",{placeholder:\"mm/yyyy\"});\n        });\n        when(\"typing\",function(){\n            input.mashKeys(\"12\");\n        });\n        waits(20);\n        then(\"placeholder text should be correct\",function(){\n            expect(input).toHaveValue('12/yyyy');\n        });\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Raw.Spec.js":"feature(\"Getting raw value\",function(){\n\tscenario(\"After typing\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput\n\t\t\t.mask(\"9/9\");\n\t\t});\n\n\t\twhen(\"typing all numbers\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"12\");\n\t\t});\n\t});\n\n\tscenario(\"While typing\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput\n\t\t\t.mask(\"9/9\");\n\t\t});\n\n\t\twhen(\"typing a number\",function(){\n\t\t\tinput.mashKeys(\"1\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"1\");\n\t\t});\n\t});\n\n\tscenario(\"Before typing\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput\n\t\t\t.mask(\"9/9\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"\");\n\t\t});\n\t});\n\n\tscenario(\"After typing partial input past an optional marker\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput\n\t\t\t.mask(\"9?99\");\n\t\t});\n\n\t\twhen(\"typing a partial input\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"12\");\n\t\t});\n\t});\n\n\tscenario(\"Verify if the input hasn't the mask bound through the raw value\", function() {\n        given(\"an input without a mask\", function() {\n            input\n            .mask(\"9/9-9_9\").unmask();\n        });\n\n        then(\"The raw value should be undefined and no error must occur\", function() {\n            expect(input.mask()).toBe(undefined);\n        });\n    });\n});\n\nfeature(\"Getting raw value with autoclear set to false\", function() {\n\tscenario(\"After typing\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput.mask(\"9/9\", { autoclear: false });\n\t\t});\n\n\t\twhen(\"typing all numbers\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"12\");\n\t\t});\n\t});\n\n\tscenario(\"While typing\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput.mask(\"9/9\", { autoclear: false });\n\t\t});\n\n\t\twhen(\"typing a number\",function(){\n\t\t\tinput.mashKeys(\"1\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"1\");\n\t\t});\n\t});\n\n\tscenario(\"Before typing\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput.mask(\"9/9\", { autoclear: false });\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"\");\n\t\t});\n\t});\n\n\tscenario(\"After typing partial input past an optional marker\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput.mask(\"9?99\", { autoclear: false });\n\t\t});\n\n\t\twhen(\"typing a partial input\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"12\");\n\t\t});\n\t});\n\n\tscenario(\"After typing partial input\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput.mask(\"99?99\", { autoclear: false });\n\t\t});\n\n\t\twhen(\"typing a partial input\",function(){\n\t\t\tinput.mashKeys(\"1\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"1\");\n\t\t});\n\t});\n\n\tscenario(\"After typing partial input up to an optional marker\",function(){\n\t\tgiven(\"an input with a mask containing a literal\", function(){\n\t\t\tinput.mask(\"9?99\", { autoclear: false });\n\t\t});\n\n\t\twhen(\"typing a partial input\",function(){\n\t\t\tinput.mashKeys(\"1\");\n\t\t});\n\n\t\tthen(\"raw value should be correct\",function(){\n\t\t\texpect(input.mask()).toEqual(\"1\");\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Readonly.Spec.js":"feature(\"Readonly Inputs\", function() {\n\tscenario('Typing',function(){\n\n\t\tgiven(\"a input with readonly added after mask\", function(){\n\t\t\tinput.mask(\"99\").attr(\"readonly\",true);\n\t\t});\n\n\t\twhen(\"typing left to right\",function(){\n\t\t\tinput.mashKeys(\"12\");\n\t\t});\n\n\t\tthen(\"Input should be ignored\",function(){\n\t\t\texpect(input).toHaveValue(\"\");\n\t\t});\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Setup.Spec.js":"feature(\"Masking an Input\", function() {\t\n\tscenario('Applying a mask to an already masked input',function(){\n\t\tgiven(\"an input with two masks\", function(){\n\t\t\tinput\n\t\t\t.mask(\"9\")\n\t\t\t.mask(\"99\");\n\t\t});\n\n\t\twhen(\"typing a number\",function(){\n\t\t\tinput.mashKeys(\"1\");\n\t\t});\n\n\t\tthen(\"value should be correct\",function(){\n\t\t\texpect(input).toHaveValue('1_');\n\t\t});\n\t});\n});\n\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/Typing.Spec.js":"describe(\"Typing Specifications\", function() {\n\n\tdescribe(\"with caret position to the left of a character\",function(){\n\t\tdescribe(\"when character to right matches the next mask definition\",function(){\n\t\t\tbeforeEach(function(){\n\t\t\t\truns(function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mask(\"99\")\n\t\t\t\t\t.focus()\t\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\twaits(1);\n\t\t\t\truns(function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mashKeys(\"1\")\n\t\t\t\t\t.caret(0)\n\t\t\t\t\t.mashKeys(\"2\");\n\t\t\t\t});\n\t\t\t})\n\t\t\t\n\t\t\tit(\"should shift character to the right\",function(){\n\t\t\t\texpect(input).toHaveValue(\"21\");\n\t\t\t});\n\t\t\t\n\t\t\tit(\"should have correct caret position\",function(){\n\t\t\t\tvar caret=input.caret();\n\t\t\t\texpect(caret.begin).toEqual(1);            \n\t\t\t\texpect(caret.end).toEqual(1);\n\t\t\t});\n\t\t});\n\t\t\n\t\tdescribe(\"when character to right does not match the next mask definition\",function(){\n\t\t\tbeforeEach(function(){\n\t\t\t\truns(function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mask(\"9a\")\n\t\t\t\t\t.focus()\t\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\twaits(1);\n\t\t\t\truns(function(){\n\t\t\t\t\tinput\n\t\t\t\t\t.mashKeys(\"1\")\n\t\t\t\t\t.caret(0)\n\t\t\t\t\t.mashKeys(\"2\");\n\t\t\t\t});\n\t\t\t})\n\t\t\t\n\t\t\tit(\"should overwrite character\",function(){\n\t\t\t\texpect(input).toHaveValue(\"2_\");\n\t\t\t});\n\t\t\t\n\t\t\tit(\"should have correct caret position\",function(){\n\t\t\t\tvar caret=input.caret();\n\t\t\t\texpect(caret.begin).toEqual(1);            \n\t\t\t\texpect(caret.end).toEqual(1);\n\t\t\t});\n\t\t});\t\t\n\t});\n});","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/src/jquery.maskedinput.js":"(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS\n        factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n\nvar ua = navigator.userAgent,\n\tiPhone = /iphone/i.test(ua),\n\tchrome = /chrome/i.test(ua),\n\tandroid = /android/i.test(ua),\n\tcaretTimeoutId;\n\n$.mask = {\n\t//Predefined character definitions\n\tdefinitions: {\n\t\t'9': \"[0-9]\",\n\t\t'a': \"[A-Za-z]\",\n\t\t'*': \"[A-Za-z0-9]\"\n\t},\n\tautoclear: true,\n\tdataName: \"rawMaskFn\",\n\tplaceholder: '_'\n};\n\n$.fn.extend({\n\t//Helper Function for Caret positioning\n\tcaret: function(begin, end) {\n\t\tvar range;\n\n\t\tif (this.length === 0 || this.is(\":hidden\") || this.get(0) !== document.activeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof begin == 'number') {\n\t\t\tend = (typeof end === 'number') ? end : begin;\n\t\t\treturn this.each(function() {\n\t\t\t\tif (this.setSelectionRange) {\n\t\t\t\t\tthis.setSelectionRange(begin, end);\n\t\t\t\t} else if (this.createTextRange) {\n\t\t\t\t\trange = this.createTextRange();\n\t\t\t\t\trange.collapse(true);\n\t\t\t\t\trange.moveEnd('character', end);\n\t\t\t\t\trange.moveStart('character', begin);\n\t\t\t\t\trange.select();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this[0].setSelectionRange) {\n\t\t\t\tbegin = this[0].selectionStart;\n\t\t\t\tend = this[0].selectionEnd;\n\t\t\t} else if (document.selection && document.selection.createRange) {\n\t\t\t\trange = document.selection.createRange();\n\t\t\t\tbegin = 0 - range.duplicate().moveStart('character', -100000);\n\t\t\t\tend = begin + range.text.length;\n\t\t\t}\n\t\t\treturn { begin: begin, end: end };\n\t\t}\n\t},\n\tunmask: function() {\n\t\treturn this.trigger(\"unmask\");\n\t},\n\tmask: function(mask, settings) {\n\t\tvar input,\n\t\t\tdefs,\n\t\t\ttests,\n\t\t\tpartialPosition,\n\t\t\tfirstNonMaskPos,\n            lastRequiredNonMaskPos,\n            len,\n            oldVal;\n\n\t\tif (!mask && this.length > 0) {\n\t\t\tinput = $(this[0]);\n            var fn = input.data($.mask.dataName)\n\t\t\treturn fn?fn():undefined;\n\t\t}\n\n\t\tsettings = $.extend({\n\t\t\tautoclear: $.mask.autoclear,\n\t\t\tplaceholder: $.mask.placeholder, // Load default placeholder\n\t\t\tcompleted: null\n\t\t}, settings);\n\n\n\t\tdefs = $.mask.definitions;\n\t\ttests = [];\n\t\tpartialPosition = len = mask.length;\n\t\tfirstNonMaskPos = null;\n\n\t\tmask = String(mask);\n\n\t\t$.each(mask.split(\"\"), function(i, c) {\n\t\t\tif (c == '?') {\n\t\t\t\tlen--;\n\t\t\t\tpartialPosition = i;\n\t\t\t} else if (defs[c]) {\n\t\t\t\ttests.push(new RegExp(defs[c]));\n\t\t\t\tif (firstNonMaskPos === null) {\n\t\t\t\t\tfirstNonMaskPos = tests.length - 1;\n\t\t\t\t}\n                if(i < partialPosition){\n                    lastRequiredNonMaskPos = tests.length - 1;\n                }\n\t\t\t} else {\n\t\t\t\ttests.push(null);\n\t\t\t}\n\t\t});\n\n\t\treturn this.trigger(\"unmask\").each(function() {\n\t\t\tvar input = $(this),\n\t\t\t\tbuffer = $.map(\n    \t\t\t\tmask.split(\"\"),\n    \t\t\t\tfunction(c, i) {\n    \t\t\t\t\tif (c != '?') {\n    \t\t\t\t\t\treturn defs[c] ? getPlaceholder(i) : c;\n    \t\t\t\t\t}\n    \t\t\t\t}),\n\t\t\t\tdefaultBuffer = buffer.join(''),\n\t\t\t\tfocusText = input.val();\n\n            function tryFireCompleted(){\n                if (!settings.completed) {\n                    return;\n                }\n\n                for (var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {\n                    if (tests[i] && buffer[i] === getPlaceholder(i)) {\n                        return;\n                    }\n                }\n                settings.completed.call(input);\n            }\n\n            function getPlaceholder(i){\n                if(i < settings.placeholder.length)\n                    return settings.placeholder.charAt(i);\n                return settings.placeholder.charAt(0);\n            }\n\n\t\t\tfunction seekNext(pos) {\n\t\t\t\twhile (++pos < len && !tests[pos]);\n\t\t\t\treturn pos;\n\t\t\t}\n\n\t\t\tfunction seekPrev(pos) {\n\t\t\t\twhile (--pos >= 0 && !tests[pos]);\n\t\t\t\treturn pos;\n\t\t\t}\n\n\t\t\tfunction shiftL(begin,end) {\n\t\t\t\tvar i,\n\t\t\t\t\tj;\n\n\t\t\t\tif (begin<0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (i = begin, j = seekNext(end); i < len; i++) {\n\t\t\t\t\tif (tests[i]) {\n\t\t\t\t\t\tif (j < len && tests[i].test(buffer[j])) {\n\t\t\t\t\t\t\tbuffer[i] = buffer[j];\n\t\t\t\t\t\t\tbuffer[j] = getPlaceholder(j);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tj = seekNext(j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twriteBuffer();\n\t\t\t\tinput.caret(Math.max(firstNonMaskPos, begin));\n\t\t\t}\n\n\t\t\tfunction shiftR(pos) {\n\t\t\t\tvar i,\n\t\t\t\t\tc,\n\t\t\t\t\tj,\n\t\t\t\t\tt;\n\n\t\t\t\tfor (i = pos, c = getPlaceholder(pos); i < len; i++) {\n\t\t\t\t\tif (tests[i]) {\n\t\t\t\t\t\tj = seekNext(i);\n\t\t\t\t\t\tt = buffer[i];\n\t\t\t\t\t\tbuffer[i] = c;\n\t\t\t\t\t\tif (j < len && tests[j].test(t)) {\n\t\t\t\t\t\t\tc = t;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction androidInputEvent(e) {\n\t\t\t\tvar curVal = input.val();\n\t\t\t\tvar pos = input.caret();\n\t\t\t\tif (oldVal && oldVal.length && oldVal.length > curVal.length ) {\n\t\t\t\t\t// a deletion or backspace happened\n\t\t\t\t\tcheckVal(true);\n\t\t\t\t\twhile (pos.begin > 0 && !tests[pos.begin-1])\n\t\t\t\t\t\tpos.begin--;\n\t\t\t\t\tif (pos.begin === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (pos.begin < firstNonMaskPos && !tests[pos.begin])\n\t\t\t\t\t\t\tpos.begin++;\n\t\t\t\t\t}\n\t\t\t\t\tinput.caret(pos.begin,pos.begin);\n\t\t\t\t} else {\n\t\t\t\t\tvar pos2 = checkVal(true);\n\t\t\t\t\tvar lastEnteredValue = curVal.charAt(pos.begin);\n\t\t\t\t\tif (pos.begin < len){\n\t\t\t\t\t\tif(!tests[pos.begin]){\n\t\t\t\t\t\t\tpos.begin++;\n\t\t\t\t\t\t\tif(tests[pos.begin].test(lastEnteredValue)){\n\t\t\t\t\t\t\t\tpos.begin++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tif(tests[pos.begin].test(lastEnteredValue)){\n\t\t\t\t\t\t\t\tpos.begin++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinput.caret(pos.begin,pos.begin);\n\t\t\t\t}\n\t\t\t\ttryFireCompleted();\n\t\t\t}\n\n\n\t\t\tfunction blurEvent(e) {\n                checkVal();\n\n                if (input.val() != focusText)\n                    input.change();\n            }\n\n\t\t\tfunction keydownEvent(e) {\n                if (input.prop(\"readonly\")){\n                    return;\n                }\n\n\t\t\t\tvar k = e.which || e.keyCode,\n\t\t\t\t\tpos,\n\t\t\t\t\tbegin,\n\t\t\t\t\tend;\n                    oldVal = input.val();\n\t\t\t\t//backspace, delete, and escape get special treatment\n\t\t\t\tif (k === 8 || k === 46 || (iPhone && k === 127)) {\n\t\t\t\t\tpos = input.caret();\n\t\t\t\t\tbegin = pos.begin;\n\t\t\t\t\tend = pos.end;\n\n\t\t\t\t\tif (end - begin === 0) {\n\t\t\t\t\t\tbegin=k!==46?seekPrev(begin):(end=seekNext(begin-1));\n\t\t\t\t\t\tend=k===46?seekNext(end):end;\n\t\t\t\t\t}\n\t\t\t\t\tclearBuffer(begin, end);\n\t\t\t\t\tshiftL(begin, end - 1);\n\n\t\t\t\t\te.preventDefault();\n\t\t\t\t} else if( k === 13 ) { // enter\n\t\t\t\t\tblurEvent.call(this, e);\n\t\t\t\t} else if (k === 27) { // escape\n\t\t\t\t\tinput.val(focusText);\n\t\t\t\t\tinput.caret(0, checkVal());\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction keypressEvent(e) {\n                if (input.prop(\"readonly\")){\n                    return;\n                }\n\n\t\t\t\tvar k = e.which || e.keyCode,\n\t\t\t\t\tpos = input.caret(),\n\t\t\t\t\tp,\n\t\t\t\t\tc,\n\t\t\t\t\tnext;\n\n\t\t\t\tif (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore\n\t\t\t\t\treturn;\n\t\t\t\t} else if ( k && k !== 13 ) {\n\t\t\t\t\tif (pos.end - pos.begin !== 0){\n\t\t\t\t\t\tclearBuffer(pos.begin, pos.end);\n\t\t\t\t\t\tshiftL(pos.begin, pos.end-1);\n\t\t\t\t\t}\n\n\t\t\t\t\tp = seekNext(pos.begin - 1);\n\t\t\t\t\tif (p < len) {\n\t\t\t\t\t\tc = String.fromCharCode(k);\n\t\t\t\t\t\tif (tests[p].test(c)) {\n\t\t\t\t\t\t\tshiftR(p);\n\n\t\t\t\t\t\t\tbuffer[p] = c;\n\t\t\t\t\t\t\twriteBuffer();\n\t\t\t\t\t\t\tnext = seekNext(p);\n\n\t\t\t\t\t\t\tif(android){\n\t\t\t\t\t\t\t\t//Path for CSP Violation on FireFox OS 1.1\n\t\t\t\t\t\t\t\tvar proxy = function() {\n\t\t\t\t\t\t\t\t\t$.proxy($.fn.caret,input,next)();\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tsetTimeout(proxy,0);\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tinput.caret(next);\n\t\t\t\t\t\t\t}\n                            if(pos.begin <= lastRequiredNonMaskPos){\n\t\t                         tryFireCompleted();\n                             }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction clearBuffer(start, end) {\n\t\t\t\tvar i;\n\t\t\t\tfor (i = start; i < end && i < len; i++) {\n\t\t\t\t\tif (tests[i]) {\n\t\t\t\t\t\tbuffer[i] = getPlaceholder(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction writeBuffer() { input.val(buffer.join('')); }\n\n\t\t\tfunction checkVal(allow) {\n\t\t\t\t//try to place characters where they belong\n\t\t\t\tvar test = input.val(),\n\t\t\t\t\tlastMatch = -1,\n\t\t\t\t\ti,\n\t\t\t\t\tc,\n\t\t\t\t\tpos;\n\n\t\t\t\tfor (i = 0, pos = 0; i < len; i++) {\n\t\t\t\t\tif (tests[i]) {\n\t\t\t\t\t\tbuffer[i] = getPlaceholder(i);\n\t\t\t\t\t\twhile (pos++ < test.length) {\n\t\t\t\t\t\t\tc = test.charAt(pos - 1);\n\t\t\t\t\t\t\tif (tests[i].test(c)) {\n\t\t\t\t\t\t\t\tbuffer[i] = c;\n\t\t\t\t\t\t\t\tlastMatch = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pos > test.length) {\n\t\t\t\t\t\t\tclearBuffer(i + 1, len);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n                        if (buffer[i] === test.charAt(pos)) {\n                            pos++;\n                        }\n                        if( i < partialPosition){\n                            lastMatch = i;\n                        }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allow) {\n\t\t\t\t\twriteBuffer();\n\t\t\t\t} else if (lastMatch + 1 < partialPosition) {\n\t\t\t\t\tif (settings.autoclear || buffer.join('') === defaultBuffer) {\n\t\t\t\t\t\t// Invalid value. Remove it and replace it with the\n\t\t\t\t\t\t// mask, which is the default behavior.\n\t\t\t\t\t\tif(input.val()) input.val(\"\");\n\t\t\t\t\t\tclearBuffer(0, len);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Invalid value, but we opt to show the value to the\n\t\t\t\t\t\t// user and allow them to correct their mistake.\n\t\t\t\t\t\twriteBuffer();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twriteBuffer();\n\t\t\t\t\tinput.val(input.val().substring(0, lastMatch + 1));\n\t\t\t\t}\n\t\t\t\treturn (partialPosition ? i : firstNonMaskPos);\n\t\t\t}\n\n\t\t\tinput.data($.mask.dataName,function(){\n\t\t\t\treturn $.map(buffer, function(c, i) {\n\t\t\t\t\treturn tests[i]&&c!=getPlaceholder(i) ? c : null;\n\t\t\t\t}).join('');\n\t\t\t});\n\n\n\t\t\tinput\n\t\t\t\t.one(\"unmask\", function() {\n\t\t\t\t\tinput\n\t\t\t\t\t\t.off(\".mask\")\n\t\t\t\t\t\t.removeData($.mask.dataName);\n\t\t\t\t})\n\t\t\t\t.on(\"focus.mask\", function() {\n                    if (input.prop(\"readonly\")){\n                        return;\n                    }\n\n\t\t\t\t\tclearTimeout(caretTimeoutId);\n\t\t\t\t\tvar pos;\n\n\t\t\t\t\tfocusText = input.val();\n\n\t\t\t\t\tpos = checkVal();\n\n\t\t\t\t\tcaretTimeoutId = setTimeout(function(){\n                        if(input.get(0) !== document.activeElement){\n                            return;\n                        }\n\t\t\t\t\t\twriteBuffer();\n\t\t\t\t\t\tif (pos == mask.replace(\"?\",\"\").length) {\n\t\t\t\t\t\t\tinput.caret(0, pos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinput.caret(pos);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 10);\n\t\t\t\t})\n\t\t\t\t.on(\"blur.mask\", blurEvent)\n\t\t\t\t.on(\"keydown.mask\", keydownEvent)\n\t\t\t\t.on(\"keypress.mask\", keypressEvent)\n\t\t\t\t.on(\"input.mask paste.mask\", function() {\n                    if (input.prop(\"readonly\")){\n                        return;\n                    }\n\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tvar pos=checkVal(true);\n\t\t\t\t\t\tinput.caret(pos);\n                        tryFireCompleted();\n\t\t\t\t\t}, 0);\n\t\t\t\t});\n                if (chrome && android)\n                {\n                    input\n                        .off('input.mask')\n                        .on('input.mask', androidInputEvent);\n                }\n\t\t\t\tcheckVal(); //Perform initial check for existing values\n\t\t});\n\t}\n});\n}));\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/lib/jquery.keymasher.js":"/*\n\tKey Masher plugin for jQuery (https://github.com/digitalBush/jquery.keymasher)\n\tCopyright (c) 2010-2014 Josh Bush (digitalbush.com)\n\tLicensed under the MIT license\n\tVersion: 0.4\n*/\n\n(function($,undefined){\n\t\t//numberPad={'0':96,'1':97,'2':98,'3':99,'4':100,'5':101,'6':102,'7':103,'8':104,'9':105,'*':106,'+':107,'-':109,'.':110,'/':111},\n\n\tvar keys=(function(){\n\t\tvar\tdefs={},\n\t\t\tkeys    = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`-=[]\\\\;',./ \\t\\n\\r\",\n\t\t\tshifted = \"abcdefghijklmnopqrstuvwxyz!@#$%^&*()~_+{}|:\\\"<>?\",\n\t\t\tnoprint={shift:16,ctrl:17,meta:91,alt:18,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,\n\t\t\t\t\tcapslock:20,numlock:144,scrolllock:145,pageup:33,pagedown:34,end:35,home:36,backspace:8,\n\t\t\t\t\tinsert:45, 'delete':46,pause:19,esc:27,left:37,up:38,right:39,down:40,printscreen:44};\n\n\t\t$.each(keys.split(''),function(index,value){\n\t\t\tvar keyCode=value.charCodeAt(0),shift=shifted[index];\n\t\t\tdefs[value]={keyCode:keyCode,charCode:keyCode,shift:shift};\n\t\t\tif(shift)\n\t\t\t\tdefs[shift]={keyCode:keyCode,charCode:shift.charCodeAt(0),shift:value,requiresShift:index>=26};\n\t\t});\n\t\t$.each(noprint,function(key,value){defs[key]={keyCode:value};});\n\t\treturn defs;\n\t})();\n\n\tvar KeyMasher=function(elm){\n\t\tvar\tmodifierState={alt: false, ctrl: false,\tmeta: false, shift: false},\n\t\t\tforced={};\n\n\t\tvar queueModifierEvent=function(direction,modifier,isForced){\n\t\t\tforced[modifier]=isForced;\n\t\t\tmodifierState[modifier]=(direction=='down');\n\t\t\tvar event=$.extend($.Event(), modifierState, {type:'key'+direction, keyCode: keys[modifier].keyCode, charCode: 0});\n\t\t\telm.trigger(event);\n\t\t};\n\n\t\tvar queueStroke=function(key){\n\t\t\tif($.type(key)==='string')\n\t\t\t\tkey=keys[key];\n\t\t\tif(key.requiresShift && !modifierState.shift)\n\t\t\t\tqueueModifierEvent('down','shift',true);\n\t\t\telse if(modifierState.shift && key.shift)\n\t\t\t\tkey=keys[key.shift];\n\n\t\t\tvar ignore = !key.charCode || modifierState.alt || modifierState.ctrl || modifierState.meta,\n\t\t\t\tdown = $.extend($.Event('keydown'), modifierState, {keyCode: key.keyCode, charCode: 0, which:key.keyCode}),\n\t\t\t\tpress = $.extend($.Event('keypress'), modifierState, {keyCode: key.charCode, charCode: key.charCode, which: key.charCode}),\n\t\t\t\tup = $.extend($.Event('keyup'), modifierState, {keyCode: key.keyCode, charCode: 0, which:key.keyCode});\n\n\t\t\telm.trigger(down);\n\t\t\tif(!down.isDefaultPrevented() && !ignore){\n\t\t\t\telm.trigger(press);\n\t\t\t\tif(!press.isDefaultPrevented() && !elm.prop(\"readonly\")){\n\t\t\t\t\t//need to do caret positioning\n\t\t\t\t\telm.val(elm.val()+String.fromCharCode(key.charCode));\n\t\t\t\t}\n\t\t\t}\n\t\t\telm.trigger(up);\n\n\t\t\tif(forced.shift)\n\t\t\t\tqueueModifierEvent('up','shift');\n\t\t};\n\n\t\tvar public={\n\t\t\thold:function(holding,typing){\n\t\t\t\tvar toks=holding.split(',');\n\t\t\t\t$.each(toks,function(index,value){queueModifierEvent('down',value);});\n\t\t\t\tpublic.type(typing);\n\t\t\t\t$.each(toks,function(index,value){queueModifierEvent('up',value);});\n\t\t\t\treturn public;\n\t\t\t},\n\t\t\ttype:function(){\n\t\t\t\t$.each(arguments,function(index,typing){\n\t\t\t\t\tif($.type(typing)==='string')\n\t\t\t\t\t\t$.each(typing.split(''),function(index,value){queueStroke(value);});\n\t\t\t\t\telse\n\t\t\t\t\t\tqueueStroke(typing);\n\t\t\t\t});\n\t\t\t\treturn public;\n\t\t\t}\n\t\t};\n\t\treturn $.extend(public,keys);\n\t};\n\n\t$.fn.mashKeys=function(fn){\n\t\tif($.type(fn)==='string'){\n\t\t\tvar typing=fn;\n\t\t\tfn=function(keys){keys.type(typing)};\n\t\t}\n\t\treturn this.each(function(){\n\t\t\tfn(KeyMasher($(this)));\n\t\t});\n\t};\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/lib/matchers.js":"beforeEach(function(){\n\tthis.addMatchers({\n\t\ttoHaveValue:function(expected){\t\t\t\n\t\t\treturn (this.actual=this.actual.val())===expected;\n\t\t},\n\t\ttoMatchPropertiesOf:function(expected){\n\t\t\tif($.type(expected)!=='object')\n\t\t\t\treturn false;\n\t\t\tfor(var prop in expected){\n\t\t\t\tif(this.actual[prop]!==expected[prop])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t});\n});\n","/home/travis/build/npmtest/node-npmtest-jquery.maskedinput/node_modules/jquery.maskedinput/spec/lib/setup.js":"function importGrammar(g){\n    for (var prop in g) {\n        if (g.hasOwnProperty(prop))\n            window[prop] = g[prop];\n\n    }\n}\n\nimportGrammar(jasmine.grammar.FeatureStory);\nimportGrammar(jasmine.grammar.GWT);\n\nvar input;\nbeforeEach(function(){ input = $(\"<input />\").appendTo(\"body\").focus(); });\nafterEach(function(){ input.remove();});\n"}